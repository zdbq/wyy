{"ast":null,"code":"import { defineComponent, inject, watch, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, unref, normalizeStyle } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { popperArrowProps } from './arrow.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { POPPER_CONTENT_INJECTION_KEY } from '../../../tokens/popper.mjs';\nconst __default__ = defineComponent({\n  name: \"ElPopperArrow\",\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: popperArrowProps,\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"popper\");\n    const {\n      arrowOffset,\n      arrowRef,\n      arrowStyle\n    } = inject(POPPER_CONTENT_INJECTION_KEY, void 0);\n    watch(() => props.arrowOffset, val => {\n      arrowOffset.value = val;\n    });\n    onBeforeUnmount(() => {\n      arrowRef.value = void 0;\n    });\n    expose({\n      arrowRef\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"span\", {\n        ref_key: \"arrowRef\",\n        ref: arrowRef,\n        class: normalizeClass(unref(ns).e(\"arrow\")),\n        style: normalizeStyle(unref(arrowStyle)),\n        \"data-popper-arrow\": \"\"\n      }, null, 6);\n    };\n  }\n});\nvar ElPopperArrow = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/popper/src/arrow.vue\"]]);\nexport { ElPopperArrow as default };","map":{"version":3,"mappings":";;;;;;;mCAec;EACZA,IAAM;EACNC,YAAc;AAChB;;;;;;;;IAIM,WAAKC,aAAa,QAAQ;IAChC,MAAM;MAAEC,WAAa;MAAAC;MAAUC;IAAe,WAC5CC,8BACA,KACF;IAEAC,MACE,MAAMC,MAAML,WACZ,EAACM,GAAQ;MACPN,YAAYO,KAAQ;IAAA,CAExB;IACAC,gBAAgB,MAAM;MACpBP,SAASM,KAAQ;IAAA,CAClB;IAEYE;MAIXR;IAAA,CACD","names":["name","inheritAttrs","useNamespace","arrowOffset","arrowRef","arrowStyle","POPPER_CONTENT_INJECTION_KEY","watch","props","val","value","onBeforeUnmount","expose"],"sources":["../../../../../../packages/components/popper/src/arrow.vue"],"sourcesContent":["<template>\n  <span\n    ref=\"arrowRef\"\n    :class=\"ns.e('arrow')\"\n    :style=\"arrowStyle\"\n    data-popper-arrow\n  />\n</template>\n\n<script lang=\"ts\" setup>\nimport { inject, onBeforeUnmount, watch } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { POPPER_CONTENT_INJECTION_KEY } from '@element-plus/tokens'\nimport { popperArrowProps } from './arrow'\n\ndefineOptions({\n  name: 'ElPopperArrow',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(popperArrowProps)\n\nconst ns = useNamespace('popper')\nconst { arrowOffset, arrowRef, arrowStyle } = inject(\n  POPPER_CONTENT_INJECTION_KEY,\n  undefined\n)!\n\nwatch(\n  () => props.arrowOffset,\n  (val) => {\n    arrowOffset.value = val\n  }\n)\nonBeforeUnmount(() => {\n  arrowRef.value = undefined\n})\n\ndefineExpose({\n  /**\n   * @description Arrow element\n   */\n  arrowRef,\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
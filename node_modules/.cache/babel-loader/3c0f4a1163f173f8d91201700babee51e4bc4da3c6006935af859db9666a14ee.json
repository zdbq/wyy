{"ast":null,"code":"import { defineComponent, inject, ref, provide, onMounted, watch, unref, onBeforeUnmount, openBlock, createElementBlock, mergeProps, createVNode, withCtx, renderSlot } from 'vue';\nimport { NOOP } from '@vue/shared';\nimport { isNil } from 'lodash-unified';\nimport '../../focus-trap/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../utils/index.mjs';\nimport { popperContentProps, popperContentEmits } from './content.mjs';\nimport './composables/index.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { usePopperContentFocusTrap } from './composables/use-focus-trap.mjs';\nimport { usePopperContent } from './composables/use-content.mjs';\nimport { usePopperContentDOM } from './composables/use-content-dom.mjs';\nimport { formItemContextKey } from '../../../tokens/form.mjs';\nimport { POPPER_CONTENT_INJECTION_KEY } from '../../../tokens/popper.mjs';\nimport { isElement } from '../../../utils/types.mjs';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\nconst __default__ = defineComponent({\n  name: \"ElPopperContent\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: popperContentProps,\n  emits: popperContentEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const {\n      focusStartRef,\n      trapped,\n      onFocusAfterReleased,\n      onFocusAfterTrapped,\n      onFocusInTrap,\n      onFocusoutPrevented,\n      onReleaseRequested\n    } = usePopperContentFocusTrap(props, emit);\n    const {\n      attributes,\n      arrowRef,\n      contentRef,\n      styles,\n      instanceRef,\n      role,\n      update\n    } = usePopperContent(props);\n    const {\n      ariaModal,\n      arrowStyle,\n      contentAttrs,\n      contentClass,\n      contentStyle,\n      updateZIndex\n    } = usePopperContentDOM(props, {\n      styles,\n      attributes,\n      role\n    });\n    const formItemContext = inject(formItemContextKey, void 0);\n    const arrowOffset = ref();\n    provide(POPPER_CONTENT_INJECTION_KEY, {\n      arrowStyle,\n      arrowRef,\n      arrowOffset\n    });\n    if (formItemContext && (formItemContext.addInputId || formItemContext.removeInputId)) {\n      provide(formItemContextKey, {\n        ...formItemContext,\n        addInputId: NOOP,\n        removeInputId: NOOP\n      });\n    }\n    let triggerTargetAriaStopWatch = void 0;\n    const updatePopper = (shouldUpdateZIndex = true) => {\n      update();\n      shouldUpdateZIndex && updateZIndex();\n    };\n    const togglePopperAlive = () => {\n      updatePopper(false);\n      if (props.visible && props.focusOnShow) {\n        trapped.value = true;\n      } else if (props.visible === false) {\n        trapped.value = false;\n      }\n    };\n    onMounted(() => {\n      watch(() => props.triggerTargetEl, (triggerTargetEl, prevTriggerTargetEl) => {\n        triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();\n        triggerTargetAriaStopWatch = void 0;\n        const el = unref(triggerTargetEl || contentRef.value);\n        const prevEl = unref(prevTriggerTargetEl || contentRef.value);\n        if (isElement(el)) {\n          triggerTargetAriaStopWatch = watch([role, () => props.ariaLabel, ariaModal, () => props.id], watches => {\n            ;\n            [\"role\", \"aria-label\", \"aria-modal\", \"id\"].forEach((key, idx) => {\n              isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);\n            });\n          }, {\n            immediate: true\n          });\n        }\n        if (prevEl !== el && isElement(prevEl)) {\n          ;\n          [\"role\", \"aria-label\", \"aria-modal\", \"id\"].forEach(key => {\n            prevEl.removeAttribute(key);\n          });\n        }\n      }, {\n        immediate: true\n      });\n      watch(() => props.visible, togglePopperAlive, {\n        immediate: true\n      });\n    });\n    onBeforeUnmount(() => {\n      triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();\n      triggerTargetAriaStopWatch = void 0;\n    });\n    expose({\n      popperContentRef: contentRef,\n      popperInstanceRef: instanceRef,\n      updatePopper,\n      contentStyle\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", mergeProps({\n        ref_key: \"contentRef\",\n        ref: contentRef\n      }, unref(contentAttrs), {\n        style: unref(contentStyle),\n        class: unref(contentClass),\n        tabindex: \"-1\",\n        onMouseenter: _cache[0] || (_cache[0] = e => _ctx.$emit(\"mouseenter\", e)),\n        onMouseleave: _cache[1] || (_cache[1] = e => _ctx.$emit(\"mouseleave\", e))\n      }), [createVNode(unref(ElFocusTrap), {\n        trapped: unref(trapped),\n        \"trap-on-focus-in\": true,\n        \"focus-trap-el\": unref(contentRef),\n        \"focus-start-el\": unref(focusStartRef),\n        onFocusAfterTrapped: unref(onFocusAfterTrapped),\n        onFocusAfterReleased: unref(onFocusAfterReleased),\n        onFocusin: unref(onFocusInTrap),\n        onFocusoutPrevented: unref(onFocusoutPrevented),\n        onReleaseRequested: unref(onReleaseRequested)\n      }, {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 8, [\"trapped\", \"focus-trap-el\", \"focus-start-el\", \"onFocusAfterTrapped\", \"onFocusAfterReleased\", \"onFocusin\", \"onFocusoutPrevented\", \"onReleaseRequested\"])], 16);\n    };\n  }\n});\nvar ElPopperContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/popper/src/content.vue\"]]);\nexport { ElPopperContent as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;mCAqDc;EACZA,IAAM;AACR;;;;;;;;;;IAMM;MACJC;MACAC;MAEAC;MACAC;MACAC;MACAC;MACAC;IAAA,CACE,6BAA0BC,OAAOC,IAAI;IAEnC;MAAEC;MAAYC,QAAU;MAAAC;MAAYC;MAAQC,WAAa;MAAAC;MAAMC;IACnE,qBAAiBR,KAAK;IAElB;MACJS;MACAC;MACAC;MACAC;MACAC;MACAC;IAAA,IACEC,oBAAoBf,KAAO;MAC7BK;MACAH;MACAK;IAAA,CACD;IAEK,wBAAkBS,MAAO,qBAAoB,KAAS;IAC5D,MAAMC,cAAcC,GAAY;IAEhCC,QAAQC,4BAA8B;MACpCV;MACAP;MACAc;IAAA,CACD;IAED,IACEI,eACC,qBAAgBC,UAAc,oBAAgBC,aAC/C;MAEAJ,QAAQK,kBAAoB;QAC1B,GAAGH;QACHC,UAAY;QACZC,aAAe;MAAA,CAChB;IAAA;IAGH,IAAIE,0BAA0D;IAExD,qBAAe,CAACC,qBAAqB,IAAS;MAC3ClB;MACPkB,sBAAsBZ,YAAa;IAAA,CACrC;IAEA,MAAMa,oBAAoB,MAAM;MAC9BC,aAAa,KAAK;MACd,UAAMC,OAAW,UAAMC,WAAa;QACtCpC,QAAQqC,KAAQ;MAAA,CAClB,UAAW/B,KAAM,aAAY,KAAO;QAClCN,QAAQqC,KAAQ;MAAA;IAClB,CACF;IAEAC,UAAU,MAAM;MACdC,MACE,MAAMjC,MAAMkC,eACZ,GAACA,iBAAiBC,mBAAwB;QACXV;QACAA;QAE7B,MAAMW,EAAK,SAAMF,eAAmB,eAAWH,KAAK;QACpD,MAAMM,MAAS,SAAMF,mBAAuB,eAAWJ,KAAK;QAExD,cAAUK,EAAE,CAAG;UACjBX,6BAA6BQ,KAC3B,EAAC1B,IAAM,QAAMP,KAAM,YAAWS,SAAW,QAAMT,KAAM,GAAE,CACvD,EAACsC,OAAY;YACX;YAAE,SAAQ,cAAc,YAAc,MAAI,EAAEC,OAAQ,EAACC,KAAKC,GAAQ;cAC1DC,cAAQD,GAAI,KACdL,EAAG,iBAAgBI,GAAG,IACtBJ,EAAG,cAAaI,GAAK,UAAQC,GAAK;YAAA,CACvC;UAAA,CAEH;YAAEE,SAAW;UAAA,CACf;QAAA;QAEF,IAAIN,MAAW,WAAMO,SAAU,OAAM,CAAG;UACtC;UAAC,CAAC,QAAQ,YAAc,gBAAc,IAAI,CAAE,SAASJ,GAAQ;YAC3DH,OAAOQ,gBAAgBL,GAAG;UAAA,CAC3B;QAAA;MACH,CAEF;QAAEG,SAAW;MAAA,CACf;MAEAV,MAAM,MAAMjC,KAAM,UAAS2B,mBAAmB;QAAEgB,WAAW;MAAA,CAAM;IAAA,CAClE;IAEDG,gBAAgB,MAAM;MACSrB;MACAA;IAAA,CAC9B;IAEYsB;MAIXC,gBAAkB;MAIlBC,iBAAmB;MAInBrB;MAKAf;IAAA,CACD","names":["name","focusStartRef","trapped","onFocusAfterReleased","onFocusAfterTrapped","onFocusInTrap","onFocusoutPrevented","onReleaseRequested","props","emit","attributes","arrowRef","contentRef","styles","instanceRef","role","update","ariaModal","arrowStyle","contentAttrs","contentClass","contentStyle","updateZIndex","usePopperContentDOM","inject","arrowOffset","ref","provide","POPPER_CONTENT_INJECTION_KEY","formItemContext","addInputId","removeInputId","formItemContextKey","triggerTargetAriaStopWatch","shouldUpdateZIndex","togglePopperAlive","updatePopper","visible","focusOnShow","value","onMounted","watch","triggerTargetEl","prevTriggerTargetEl","el","prevEl","watches","forEach","key","idx","isNil","immediate","isElement","removeAttribute","onBeforeUnmount","expose","popperContentRef","popperInstanceRef"],"sources":["../../../../../../packages/components/popper/src/content.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"contentRef\"\n    v-bind=\"contentAttrs\"\n    :style=\"contentStyle\"\n    :class=\"contentClass\"\n    tabindex=\"-1\"\n    @mouseenter=\"(e) => $emit('mouseenter', e)\"\n    @mouseleave=\"(e) => $emit('mouseleave', e)\"\n  >\n    <el-focus-trap\n      :trapped=\"trapped\"\n      :trap-on-focus-in=\"true\"\n      :focus-trap-el=\"contentRef\"\n      :focus-start-el=\"focusStartRef\"\n      @focus-after-trapped=\"onFocusAfterTrapped\"\n      @focus-after-released=\"onFocusAfterReleased\"\n      @focusin=\"onFocusInTrap\"\n      @focusout-prevented=\"onFocusoutPrevented\"\n      @release-requested=\"onReleaseRequested\"\n    >\n      <slot />\n    </el-focus-trap>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  ref,\n  unref,\n  watch,\n} from 'vue'\nimport { NOOP } from '@vue/shared'\nimport { isNil } from 'lodash-unified'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport {\n  POPPER_CONTENT_INJECTION_KEY,\n  formItemContextKey,\n} from '@element-plus/tokens'\nimport { isElement } from '@element-plus/utils'\nimport { popperContentEmits, popperContentProps } from './content'\nimport {\n  usePopperContent,\n  usePopperContentDOM,\n  usePopperContentFocusTrap,\n} from './composables'\n\nimport type { WatchStopHandle } from 'vue'\n\ndefineOptions({\n  name: 'ElPopperContent',\n})\n\nconst emit = defineEmits(popperContentEmits)\n\nconst props = defineProps(popperContentProps)\n\nconst {\n  focusStartRef,\n  trapped,\n\n  onFocusAfterReleased,\n  onFocusAfterTrapped,\n  onFocusInTrap,\n  onFocusoutPrevented,\n  onReleaseRequested,\n} = usePopperContentFocusTrap(props, emit)\n\nconst { attributes, arrowRef, contentRef, styles, instanceRef, role, update } =\n  usePopperContent(props)\n\nconst {\n  ariaModal,\n  arrowStyle,\n  contentAttrs,\n  contentClass,\n  contentStyle,\n  updateZIndex,\n} = usePopperContentDOM(props, {\n  styles,\n  attributes,\n  role,\n})\n\nconst formItemContext = inject(formItemContextKey, undefined)\nconst arrowOffset = ref<number>()\n\nprovide(POPPER_CONTENT_INJECTION_KEY, {\n  arrowStyle,\n  arrowRef,\n  arrowOffset,\n})\n\nif (\n  formItemContext &&\n  (formItemContext.addInputId || formItemContext.removeInputId)\n) {\n  // disallow auto-id from inside popper content\n  provide(formItemContextKey, {\n    ...formItemContext,\n    addInputId: NOOP,\n    removeInputId: NOOP,\n  })\n}\n\nlet triggerTargetAriaStopWatch: WatchStopHandle | undefined = undefined\n\nconst updatePopper = (shouldUpdateZIndex = true) => {\n  update()\n  shouldUpdateZIndex && updateZIndex()\n}\n\nconst togglePopperAlive = () => {\n  updatePopper(false)\n  if (props.visible && props.focusOnShow) {\n    trapped.value = true\n  } else if (props.visible === false) {\n    trapped.value = false\n  }\n}\n\nonMounted(() => {\n  watch(\n    () => props.triggerTargetEl,\n    (triggerTargetEl, prevTriggerTargetEl) => {\n      triggerTargetAriaStopWatch?.()\n      triggerTargetAriaStopWatch = undefined\n\n      const el = unref(triggerTargetEl || contentRef.value)\n      const prevEl = unref(prevTriggerTargetEl || contentRef.value)\n\n      if (isElement(el)) {\n        triggerTargetAriaStopWatch = watch(\n          [role, () => props.ariaLabel, ariaModal, () => props.id],\n          (watches) => {\n            ;['role', 'aria-label', 'aria-modal', 'id'].forEach((key, idx) => {\n              isNil(watches[idx])\n                ? el.removeAttribute(key)\n                : el.setAttribute(key, watches[idx]!)\n            })\n          },\n          { immediate: true }\n        )\n      }\n      if (prevEl !== el && isElement(prevEl)) {\n        ;['role', 'aria-label', 'aria-modal', 'id'].forEach((key) => {\n          prevEl.removeAttribute(key)\n        })\n      }\n    },\n    { immediate: true }\n  )\n\n  watch(() => props.visible, togglePopperAlive, { immediate: true })\n})\n\nonBeforeUnmount(() => {\n  triggerTargetAriaStopWatch?.()\n  triggerTargetAriaStopWatch = undefined\n})\n\ndefineExpose({\n  /**\n   * @description popper content element\n   */\n  popperContentRef: contentRef,\n  /**\n   * @description popperjs instance\n   */\n  popperInstanceRef: instanceRef,\n  /**\n   * @description method for updating popper\n   */\n  updatePopper,\n\n  /**\n   * @description content style\n   */\n  contentStyle,\n})\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}